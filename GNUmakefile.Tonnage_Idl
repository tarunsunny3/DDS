# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.Tonnage_Idl
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.Tonnage_Idl
DEPENDENCY_FILE  = .depend.Tonnage_Idl

IDL_DEPENDENCY_FILE1 = .depend.Tonnage_Idl_Idl1
IDL_DEPENDENCY_FILE2 = .depend.Tonnage_Idl_Idl2

IDL_DEPENDENCY_FILES += \
	.depend.Tonnage_Idl_Idl1 \
	.depend.Tonnage_Idl_Idl2

LIB_PREFIX      ?= lib

TAO_ROOT  ?= $(ACE_ROOT)/TAO

FILES = \

IDL_DEPS_FLAGS1 = -DGEN_IDL_MAKE_DEPS
IDL_DEPS1 = TonnageTypeSupport.idl

IDL_DEPS_FLAGS2 = -DGEN_IDL_MAKE_DEPS
IDL_DEPS2 = Tonnage.idl



LIBPATHS := . "$(ACE_ROOT)/lib" "$(DDS_ROOT)/lib"

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
TAO_IDL = $(ACE_ROOT)/bin/tao_idl
TAO_IDL_DEP = $(ACE_ROOT)/bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I $(TAO_ROOT)$(if $(ARCH), -g $(call ADD_QUOTE,$(call ADD_ARCH,$(ACE_ROOT)/bin/ace_gperf)))

PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,.)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(DDS_ROOT)/rules.dds.GNU

include $(TAO_ROOT)/rules.tao.GNU

GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/Tonnage_Idl
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

LIBCHECK = 1
ifeq ($(no_opendds_safety_profile),1)
ifneq ($(no_rapidjson),1)
ifneq ($(LIBCHECK), 1)
  all: lib_warning
endif
else
  all: avoid_warning
endif
else
  all: require_warning
endif

ifeq ($(no_opendds_safety_profile),1)
ifneq ($(no_rapidjson),1)
else
  all: avoid_warning
endif
else
  all: require_warning
endif

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L$(ACE_ROOT)/lib -L$(DDS_ROOT)/lib $(if $(android_abi),-llog)
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L$(ACE_ROOT)/lib $(if $(ARCH),-L$(ACE_ROOT)/lib/$(ARCH)) -L$(DDS_ROOT)/lib $(if $(ARCH),-L$(DDS_ROOT)/lib/$(ARCH)) $(if $(android_abi),-llog)
endif
CPPFLAGS     += -I$(ACE_ROOT) -I$(TAO_ROOT) -I$(DDS_ROOT) -I/home/tarun/dds/OpenDDS-3.24.1/tools/rapidjson/include
CPPFLAGS     += -DOPENDDS_RAPIDJSON
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
.PHONY: lib_warning
lib_warning:
	@echo Tonnage_Idl will not be built due to the following missing library: $(LIBCHECK) >&2

ifneq ($(no_opendds_safety_profile),1)
requires_disabled_macros += no_opendds_safety_profile
endif
.PHONY: require_warning
require_warning:
	@echo Tonnage_Idl will not be built due to the following disabled make macros: $(requires_disabled_macros)>&2

ifeq ($(no_rapidjson),1)
avoids_enabled_macros += no_rapidjson
endif
.PHONY: avoid_warning
avoid_warning:
	@echo Tonnage_Idl will not be built due to the following enabled make macros: $(avoids_enabled_macros)>&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
export DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
export LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
export SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
export LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
export PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

GENERATED_DIRTY += TonnageTypeSupportC.h TonnageTypeSupportS.h TonnageTypeSupportC.cpp TonnageTypeSupportS.cpp TonnageTypeSupportC.inl
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "TonnageTypeSupport.idl" -nt "TonnageTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "TonnageTypeSupport.idl" -nt "TonnageTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "TonnageTypeSupport.idl" -nt "TonnageTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "TonnageTypeSupport.idl" -nt "TonnageTypeSupportS.cpp" 2> /dev/null || $(TEST_EXE) "TonnageTypeSupport.idl" -nt "TonnageTypeSupportC.inl" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "TonnageTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "TonnageTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "TonnageTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "TonnageTypeSupportS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "TonnageTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "TonnageTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "TonnageTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "TonnageTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "TonnageTypeSupportS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "TonnageTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "TonnageTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "TonnageTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "TonnageTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "TonnageTypeSupportS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "TonnageTypeSupportC.inl" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
TonnageTypeSupportC.h TonnageTypeSupportS.h TonnageTypeSupportC.cpp TonnageTypeSupportS.cpp TonnageTypeSupportC.inl: TonnageTypeSupport.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -as -Sa -St -I$(DDS_ROOT) TonnageTypeSupport.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
TonnageTypeSupportC.h TonnageTypeSupportS.h TonnageTypeSupportC.cpp TonnageTypeSupportS.cpp TonnageTypeSupportC.inl: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += TonnageC.h TonnageS.h TonnageC.cpp TonnageS.cpp TonnageC.inl
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "Tonnage.idl" -nt "TonnageC.h" 2> /dev/null || $(TEST_EXE) "Tonnage.idl" -nt "TonnageS.h" 2> /dev/null || $(TEST_EXE) "Tonnage.idl" -nt "TonnageC.cpp" 2> /dev/null || $(TEST_EXE) "Tonnage.idl" -nt "TonnageS.cpp" 2> /dev/null || $(TEST_EXE) "Tonnage.idl" -nt "TonnageC.inl" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "TonnageC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "TonnageS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "TonnageC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "TonnageS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "TonnageC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "TonnageC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "TonnageS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "TonnageC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "TonnageS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "TonnageC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "TonnageC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "TonnageS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "TonnageC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "TonnageS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "TonnageC.inl" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
TonnageC.h TonnageS.h TonnageC.cpp TonnageS.cpp TonnageC.inl: Tonnage.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -as -Sa -St -I$(DDS_ROOT) Tonnage.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
TonnageC.h TonnageS.h TonnageC.cpp TonnageS.cpp TonnageC.inl: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

export DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
export LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
export SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
export LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
export PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

GENERATED_DIRTY += TonnageTypeSupportImpl.h TonnageTypeSupportImpl.cpp TonnageTypeSupport.idl
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "Tonnage.idl" -nt "TonnageTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "Tonnage.idl" -nt "TonnageTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "Tonnage.idl" -nt "TonnageTypeSupport.idl" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "TonnageTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "TonnageTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "TonnageTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(DDS_ROOT)/dds/idl/IDLTemplate.txt)" -nt "TonnageTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(DDS_ROOT)/dds/idl/IDLTemplate.txt)" -nt "TonnageTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(DDS_ROOT)/dds/idl/IDLTemplate.txt)" -nt "TonnageTypeSupport.idl" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
TonnageTypeSupportImpl.h TonnageTypeSupportImpl.cpp TonnageTypeSupport.idl: Tonnage.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(OPENDDS_IDL_DEP))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(DDS_ROOT)/dds/idl/IDLTemplate.txt))
	$(if $(findstring ",$(OPENDDS_IDL)),$(OPENDDS_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(OPENDDS_IDL)))) -Sa -St Tonnage.idl


ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
ifeq ($(no_opendds_safety_profile),1)
ifneq ($(no_rapidjson),1)
all: $(GENERATED_DIRTY)
endif
endif
endif

ADDITIONAL_IDL_TARGETS += $(GENERATED_DIRTY)
idl_stubs: $(ADDITIONAL_IDL_TARGETS)

incremental_depend_idl::
	@$(RM) $(IDL_DEPENDENCY_FILE1)_idl.old
	@cp $(IDL_DEPENDENCY_FILE1) $(IDL_DEPENDENCY_FILE1)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE1) \
	$(IDL_DEPS_FLAGS1) -t gnuidl -DMAKEDEPEND $(IDL_DEPS1)
	@if cmp -s $(IDL_DEPENDENCY_FILE1) $(IDL_DEPENDENCY_FILE1)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS1)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS1)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE1)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE2)_idl.old
	@cp $(IDL_DEPENDENCY_FILE2) $(IDL_DEPENDENCY_FILE2)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE2) \
	$(IDL_DEPS_FLAGS2) -t gnuidl -DMAKEDEPEND $(IDL_DEPS2)
	@if cmp -s $(IDL_DEPENDENCY_FILE2) $(IDL_DEPENDENCY_FILE2)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS2)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS2)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE2)_idl.old ;

realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
ifeq ($(no_opendds_safety_profile),1)
ifneq ($(no_rapidjson),1)
	@-:
endif
endif


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LD_RPATH ?= -Wl,-rpath,
LDFLAGS += $(LD_RPATH)$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif


